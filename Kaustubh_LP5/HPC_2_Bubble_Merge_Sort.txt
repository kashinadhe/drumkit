#include <bits/stdc++.h>
#include <omp.h>

using namespace std;

void bubbleSort(vector<int> &arr,int n){
    int i,j;
    for(i=0;i<n-1;i++){
        for(int j=0;j<n-i-1;j++){
            if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);
        }
    }
}

void parallelBubbleSort(vector<int> &arr, int n){
    int i,j;
    #pragma omp parallel shared(arr,n) private(i,j)
    {
        #pragma omp parallel for schedule(dynamic)
        for(i=0;i<n-1;i++){
            for(int j=0;j<n-i-1;j++){
                if(arr[j]>arr[j+1]) swap(arr[j],arr[j+1]);
            }
        }
    }
}

void merge(vector<int> &arr, int l, int mid, int r){
    int n1=mid-l+1;
    int n2=r-mid;
    
    vector<int> a(n1);
    for(int it=0;it<n1;it++) a[it]=arr[it+l];
    
    vector<int> b(n2);
    for(int it=0;it<n2;it++) b[it]=arr[it+mid+1];
    
    int i=0;
    int j=0;
    int k=l;
    while(i<n1 && j<n2){
        if(a[i]<b[j]){
            arr[k]=a[i];
            i++;
            k++;
        }
        else{
            arr[k]=b[j];
            j++;
            k++;
        }
    }
    
    while(i<n1){
        arr[k]=a[i];
        i++;
        k++;
    }
    
    while(j<n2){
        arr[k]=b[j];
        j++;
        k++;
    }
}

void mergeSort(vector<int> &arr, int l, int r){
    if(l<r){
        int mid=(l+r)/2;
        
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        
        merge(arr,l,mid,r);
    }
}

void parallelMergeSort(vector<int> &arr, int l, int r){
    if(l<r){
        int mid=(l+r)/2;
        #pragma omp parallel sections
        {
            #pragma omp section
            {
                mergeSort(arr,l,mid);
            }
            #pragma omp section
            {
                mergeSort(arr,mid+1,r);
            }
        }
        
        merge(arr,l,mid,r);
    }
}

int main(){
    
    vector<int> arr={5,4,3,2,1};
    vector<int> arr2={5,4,3,2,1};
    vector<int> arr3={5,4,3,2,1};
    auto start=chrono::high_resolution_clock::now();
    mergeSort(arr,0,arr.size()-1);
    auto end=chrono::high_resolution_clock::now();
    cout<<"Time taken by serial mergeSort: "<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<"ms\n";
    for(int i=0;i<arr.size();i++) cout<<arr[i]<<" ";
    
    start=chrono::high_resolution_clock::now();
    parallelMergeSort(arr2,0,arr2.size()-1);
    end=chrono::high_resolution_clock::now();
    cout<<"Time taken by parallel mergeSort: "<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<"ms\n";
    for(int i=0;i<arr.size();i++) cout<<arr2[i]<<" ";
    
    start=chrono::high_resolution_clock::now();
    parallelBubbleSort(arr3,arr3.size());
    end=chrono::high_resolution_clock::now();
    cout<<"Time taken by parallel bubblesort: "<<chrono::duration_cast<chrono::microseconds>(end-start).count()<<"ms\n";
    for(int i=0;i<arr.size();i++) cout<<arr3[i]<<" ";
    
    
    return 0;
}